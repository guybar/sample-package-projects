name: Push NPM Build to Artifactory
on: workflow_dispatch
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      JF_PROJECT: ${{ vars.JF_PROJECT_KEY }}
      JF_URL: https://${{ vars.JF_URL }}/
      JFROG_CLI_LOG_LEVEL: DEBUG
      DOCKER_IMAGE_NAME: ${{ vars.JF_URL }}/guy-docker-dev/npm-sample-docker:1.0.${{github.run_number}}
    defaults:
      run:
        working-directory: ./npm/

    steps:
      # This action checks out the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4
          
      # Download the JFrog CLI and configure using JFrog Project and OIDC provider 
      - uses: jfrog/setup-jfrog-cli@v4
        name: Setup JFrog CLI
        id: setup-cli
        env:
          JF_URL: https://${{ vars.JF_URL }}/
          JF_PROJECT: ${{ vars.JF_PROJECT_KEY }}
        with:
            oidc-provider-name: guy-github
            version: 2.67.0
      
      # This command adds a new server configuration to the JFrog CLI   
      - run: |
          jf -v
      # Ping the JFrog Platfrom instnace 
      - run: |
          jf rt ping
      # Configure JFrog CLI for NPM 
      - run: |
          jf npmc --repo-deploy=guy-npm-dev --repo-resolve=guy-npm-dev
      # NPM Install using the CLI
      - run: |
          ls
          rm -rf node_modules
          npm cache clean --force
      - run: |
          npm install  
      - run: |
          ls
          rm -rf node_modules
          npm cache clean --force
      - run: |
          jf npm install --build-name=guy-demo-npm-build --build-number=1.0.${{github.run_number}}
      # Add GitHub Data to BuildInfo 
      - run: |
          jf rt build-add-git guy-demo-npm-build 1.0.${{github.run_number}}
      # Collect all Environmental information for NPM Build 
      - run: |
          jf rt build-collect-env guy-demo-npm-build 1.0.${{github.run_number}}
      # Using NPM Publish to uplaod the NPM Build 
      - run: |
          jf npm publish --build-name=guy-demo-npm-build --build-number=1.0.${{github.run_number}}
      # Build Docker image
      - run: |
          docker build -t $DOCKER_IMAGE_NAME .
     # Scan Docker image for vulnerabilities
     # - run: |
     #     jf docker scan $DOCKER_IMAGE_NAME
      # Push image to Artifactory
      - run: |
          jf docker push $DOCKER_IMAGE_NAME
      # Publish the BuildInfo into Artifactory 
      - run: |
          jf rt build-publish guy-demo-npm-build 1.0.${{github.run_number}}
      # Scan the NPM Build with Xray 
      - run: |
           jf build-scan guy-demo-npm-build 1.0.${{github.run_number}}
      # Promote the Build from Dev to Production 
      - run: |
         jf rt build-promote guy-demo-npm-build 1.0.${{github.run_number}} guy-npm-release --status=production
